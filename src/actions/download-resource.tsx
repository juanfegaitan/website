"use server";

import { actionClient } from "@/lib/safe-action";
import { loadResource } from "@/sanity/loader/loadQuery";
import { DownloadResourceFormSchema } from "@/schema/download-resource";
import { JWT } from "google-auth-library";
import {
  GoogleSpreadsheet,
  GoogleSpreadsheetWorksheet,
} from "google-spreadsheet";
import * as z from "zod"; // 1.2 kB

const log = {
  ingest: async (data: any) => {
    console.log(data);
  },
};

enum STATUS_LOG {
  success = "success",
  error = "error",
}

const GOOGLE_SHEET_KEY = process.env
  .GOOGLE_SHEET_KEY!.split(String.raw`\n`)
  .join("\n");

const GOOGLE_SHEET_ID = process.env.GOOGLE_SHEET_ID!;
const GOOGLE_EMAIL = process.env.GOOGLE_EMAIL!;

const HEADERS_ROW = ["Nombre", "Correo", "Fecha", "Telefono", "Resource"];

function getServiceAccount() {
  const serviceAccountAuth = new JWT({
    // env var values here are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    email: GOOGLE_EMAIL,
    key: GOOGLE_SHEET_KEY.replace('"', "").replaceAll("\n", "\n"),
    scopes: ["https://www.googleapis.com/auth/spreadsheets"],
  });

  return serviceAccountAuth;
}

async function getOrCreateHeaderRow(sheet: GoogleSpreadsheetWorksheet) {
  await sheet.loadHeaderRow();

  await sheet.setHeaderRow(HEADERS_ROW);
}

async function getOrCreateSheet(sheetName: string) {
  const serviceAccountAuth = getServiceAccount();
  const doc = new GoogleSpreadsheet(GOOGLE_SHEET_ID, serviceAccountAuth);

  await doc.loadInfo();

  const sheet =
    doc.sheetsByTitle[sheetName] ||
    (await doc.addSheet({
      title: sheetName,
      headerValues: HEADERS_ROW,
    }));

  await getOrCreateHeaderRow(sheet);

  return sheet;
}

function mapContact(data: z.infer<typeof DownloadResourceFormSchema>) {
  return {
    [HEADERS_ROW[0]]: data.name,
    [HEADERS_ROW[1]]: data.email,
    [HEADERS_ROW[4]]: data.phone,
    [HEADERS_ROW[3]]: data.resourceSlug,
    [HEADERS_ROW[2]]: new Date().toLocaleDateString(),
  };
}

async function findContact(sheet: GoogleSpreadsheetWorksheet, email: string) {
  const rows = await sheet.getRows();

  return rows.find((row) => row.get(HEADERS_ROW[1]) === email);
}

export const downloadResource = actionClient
  .metadata({
    actionName: "downloadResource",
  })
  .schema(DownloadResourceFormSchema)
  .action(async (data) => {
    try {
      const name = data.parsedInput.name;

      const email = data.parsedInput.email;

      const resourceSlug = data.parsedInput.resourceSlug;

      const phone = data.parsedInput.phone;

      const contact = {
        name,
        email,
        phone,
        resourceSlug,
      };

      // fetch resource by resourceId sanitized
      const resource = await loadResource(resourceSlug);

      if (!resource.data) {
        log.ingest({
          event: "resource not found",
          data: contact,
          status_log: STATUS_LOG.error,
        });

        return {
          success: false,
          error: "Resource not found",
        };
      }

      log.ingest({
        event: "resource found",
        data: resource.data,
        status_log: STATUS_LOG.success,
      });

      const sheet = await getOrCreateSheet("Resource " + resource.data?.title);

      log.ingest({
        event: "sheet get or create",
        data: contact,
        status_log: STATUS_LOG.success,
      });

      const foundContact = await findContact(sheet, contact.email);

      if (foundContact) {
        log.ingest({
          event: "contact found",
          data: foundContact.toObject(),
          status_log: STATUS_LOG.success,
        });

        // Ovewrite contact
        foundContact.assign(mapContact(contact));

        await foundContact.save();

        log.ingest({
          event: "contact updated",
          data: foundContact.toObject(),
          status_log: STATUS_LOG.success,
        });

        return {
          success: true,
          url: resource.data?.resource,
          error: null,
        };
      }

      await sheet.addRow(mapContact(contact));

      log.ingest({
        event: "resource downloaded",
        data: contact,
        status_log: STATUS_LOG.success,
      });

      return {
        success: true,
        url: resource.data?.resource,
        error: null,
      };
    } catch (error) {
      log.ingest({
        event: "error",
        data: error.message,
        status_log: STATUS_LOG.error,
      });

      return {
        success: false,
        error: error.message,
      };
    }
  });
