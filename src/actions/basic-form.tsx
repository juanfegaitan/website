"use server";

import { actionClient } from "@/lib/safe-action";
import { BasicFormSchema } from "@/schema/basic-form";
import { JWT } from "google-auth-library";
import {
  GoogleSpreadsheet,
  GoogleSpreadsheetWorksheet,
} from "google-spreadsheet";
import { headers } from "next/headers";
import { z } from "zod";

const GOOGLE_SHEET_KEY = process.env
  .GOOGLE_SHEET_KEY!.split(String.raw`\n`)
  .join("\n");

const GOOGLE_SHEET_ID = process.env.GOOGLE_SHEET_ID!;
const GOOGLE_EMAIL = process.env.GOOGLE_EMAIL!;

const HEADERS_ROW = ["Nombre", "Correo", "Fecha", "URL"];

function getServiceAccount() {
  const serviceAccountAuth = new JWT({
    // env var values here are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    email: GOOGLE_EMAIL,
    key: GOOGLE_SHEET_KEY.replace('"', "").replaceAll("\n", "\n"),
    scopes: ["https://www.googleapis.com/auth/spreadsheets"],
  });

  return serviceAccountAuth;
}

async function getOrCreateHeaderRow(sheet: GoogleSpreadsheetWorksheet) {
  await sheet.loadHeaderRow();

  await sheet.setHeaderRow(HEADERS_ROW);
}

async function getOrCreateSheet(sheetName: string) {
  const serviceAccountAuth = getServiceAccount();
  const doc = new GoogleSpreadsheet(GOOGLE_SHEET_ID, serviceAccountAuth);

  await doc.loadInfo();

  const sheet =
    doc.sheetsByTitle[sheetName] ||
    (await doc.addSheet({
      title: sheetName,
      headerValues: HEADERS_ROW,
    }));

  await getOrCreateHeaderRow(sheet);

  return sheet;
}

const log = {
  ingest: async (data: any) => {
    console.log(data);
  },
};

enum STATUS_LOG {
  success = "success",
  error = "error",
}

async function findRow(sheet: GoogleSpreadsheetWorksheet, email: string) {
  const rows = await sheet.getRows();

  return rows.find((row) => row.get(HEADERS_ROW[1]) === email);
}

function mapData(data: z.infer<typeof BasicFormSchema>) {
  const url = headers().get("referer");

  return {
    [HEADERS_ROW[0]]: data.name,
    [HEADERS_ROW[1]]: data.email,
    [HEADERS_ROW[2]]: new Date().toLocaleDateString(),
    [HEADERS_ROW[3]]: url ?? "",
  };
}

export const registerBasicForm = actionClient
  .metadata({
    actionName: "registerBasicForm",
  })
  .schema(BasicFormSchema)
  .action(async ({ parsedInput }) => {
    try {
      const name = parsedInput.name;

      const email = parsedInput.email;

      const row = {
        name,
        email,
      };
      const sheet = await getOrCreateSheet("Basic Form");

      log.ingest({
        event: "sheet get or create",
        data: row,
        status_log: STATUS_LOG.success,
      });

      const foundRow = await findRow(sheet, email);

      if (foundRow) {
        log.ingest({
          event: "row found",
          data: foundRow.toObject(),
          status_log: STATUS_LOG.success,
        });

        // Ovewrite row
        foundRow.assign(mapData(row));

        await foundRow.save();

        log.ingest({
          event: "row updated",
          data: foundRow.toObject(),
          status_log: STATUS_LOG.success,
        });

        return {
          success: true,
        };
      }

      await sheet.addRow(mapData(row));

      log.ingest({
        event: "row added to sheet",
        data: row,
        status_log: STATUS_LOG.success,
      });

      return {
        success: true,
      };
    } catch (error) {
      log.ingest({
        event: "error",
        data: error.message,
        status_log: STATUS_LOG.error,
      });

      return {
        success: false,
        error: error.message,
      };
    }
  });
